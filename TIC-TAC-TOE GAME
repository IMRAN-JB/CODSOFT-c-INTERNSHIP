#include <iostream>
#include <vector>
#include <limits>

// Function to display the game board
void displayBoard(const std::vector<std::vector<char>> &board) {
    std::cout << "-------------" << std::endl;
    for (const auto &row : board) {
        std::cout << "| ";
        for (const auto &cell : row) {
            std::cout << cell << " | ";
        }
        std::cout << std::endl << "-------------" << std::endl;
    }
}

// Function to check if the current player has won
bool checkWin(const std::vector<std::vector<char>> &board, char player) {
    for (int i = 0; i < 3; ++i) {
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
            (board[0][i] == player && board[1][i] == player && board[2][i] == player)) {
            return true;
        }
    }
    if ((board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
        (board[0][2] == player && board[1][1] == player && board[2][0] == player)) {
        return true;
    }
    return false;
}

// Function to check if the game is a draw
bool checkDraw(const std::vector<std::vector<char>> &board) {
    for (const auto &row : board) {
        for (const auto &cell : row) {
            if (cell == ' ') {
                return false;
            }
        }
    }
    return true;
}

// Function to update the game board with the player's move
bool updateBoard(std::vector<std::vector<char>> &board, int row, int col, char player) {
    if (board[row][col] == ' ') {
        board[row][col] = player;
        return true;
    }
    return false;
}

int main() {
    std::vector<std::vector<char>> board(3, std::vector<char>(3, ' '));
    char currentPlayer = 'X';

    while (true) {
        displayBoard(board);
        std::cout << "Player " << currentPlayer << ", enter your move (row[1-3] column[1-3]): ";
        int row, col;
        std::cin >> row >> col;
        
        // Validate user input
        if (row < 1 || row > 3 || col < 1 || col > 3 || board[row - 1][col - 1] != ' ') {
            std::cout << "Invalid move. Try again." << std::endl;
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            continue;
        }
        
        // Update the board and check for win/draw
        if (!updateBoard(board, row - 1, col - 1, currentPlayer)) {
            std::cout << "That spot is already taken. Try again." << std::endl;
            continue;
        }
        
        if (checkWin(board, currentPlayer)) {
            displayBoard(board);
            std::cout << "Player " << currentPlayer << " wins! Congratulations!" << std::endl;
            break;
        } else if (checkDraw(board)) {
            displayBoard(board);
            std::cout << "It's a draw!" << std::endl;
            break;
        }
        
        // Switch players
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    return 0;
}
