#include <iostream>
#include <vector>
#include <algorithm>

struct Task {
    std::string description;
    bool completed;

    Task(const std::string& desc) : description(desc), completed(false) {}
};

class ToDoList {
private:
    std::vector<Task> tasks;

public:
    void addTask(const std::string& description) {
        tasks.emplace_back(description);
        std::cout << "Task added successfully." << std::endl;
    }

    void viewTasks() const {
        if (tasks.empty()) {
            std::cout << "No tasks found." << std::endl;
            return;
        }
        std::cout << "Tasks:" << std::endl;
        int count = 1;
        for (const auto& task : tasks) {
            std::cout << count++ << ". ";
            if (task.completed) {
                std::cout << "[X] ";
            } else {
                std::cout << "[ ] ";
            }
            std::cout << task.description << std::endl;
        }
    }

    void markCompleted(int taskIndex) {
        if (taskIndex < 1 || taskIndex > tasks.size()) {
            std::cout << "Invalid task number." << std::endl;
            return;
        }
        tasks[taskIndex - 1].completed = true;
        std::cout << "Task marked as completed." << std::endl;
    }

    void removeTask(int taskIndex) {
        if (taskIndex < 1 || taskIndex > tasks.size()) {
            std::cout << "Invalid task number." << std::endl;
            return;
        }
        tasks.erase(tasks.begin() + taskIndex - 1);
        std::cout << "Task removed successfully." << std::endl;
    }
};

int main() {
    ToDoList todo;
    int choice;

    do {
        std::cout << "==== TO-DO LIST MANAGER ====" << std::endl;
        std::cout << "1. Add Task" << std::endl;
        std::cout << "2. View Tasks" << std::endl;
        std::cout << "3. Mark Task as Completed" << std::endl;
        std::cout << "4. Remove Task" << std::endl;
        std::cout << "5. Quit" << std::endl;
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1:
                std::cin.ignore(); // Clear input buffer
                std::cout << "Enter task description: ";
                {
                    std::string desc;
                    std::getline(std::cin, desc);
                    todo.addTask(desc);
                }
                break;
            case 2:
                todo.viewTasks();
                break;
            case 3:
                int completeIndex;
                std::cout << "Enter the task number to mark as completed: ";
                std::cin >> completeIndex;
                todo.markCompleted(completeIndex);
                break;
            case 4:
                int removeIndex;
                std::cout << "Enter the task number to remove: ";
                std::cin >> removeIndex;
                todo.removeTask(removeIndex);
                break;
            case 5:
                std::cout << "Exiting program. Goodbye!" << std::endl;
                break;
            default:
                std::cout << "Invalid choice. Please enter a valid option." << std::endl;
                break;
        }
    } while (choice != 5);

    return 0;
}
